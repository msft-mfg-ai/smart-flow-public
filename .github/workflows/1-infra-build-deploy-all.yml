# ------------------------------------------------------------------------------------------------------------------------
# Action: Build and deploy all container app modules
# ----------------------------------------------------------------------------------------------------
# Note: in order to do multiple CA build/deploys, you need to change FW and login ONCE, otherwise
# it tends to have token refresh issues and fail on the second and third app
# ------------------------------------------------------------------------------------------------------------------------
name: 1 - Deploy Infra, Build, Deploy All Apps
run-name: 1 - Deploy Infra, Build, Deploy to ENV ${{ inputs.deployEnvironment }} by @${{ github.actor }}
on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - app/**
  workflow_dispatch:
    inputs:
      deployEnvironment:
        description: Environment
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
          - lyle
          - scott
          - piotr
          - chris
          - nick
          - matt
      parameterFile:
        description: Parameter File
        required: true
        default: 'main.gh.bicepparam'
      createResourceGroup:
        description: Create Resource Group?
        type: boolean
        default: true
      publicAccessEnabled:
        description: Public Access Enabled?
        type: boolean
        default: true
      createDnsZones:
        description: Create DNS Zones?
        type: boolean
        default: true
      addRoleAssignments:
        description: Add Role Assignments?
        type: boolean
        default: true
      runBuildDeployAPI:
        description: Build and Deploy API?
        required: true
        default: true
        type: boolean
      runDeployUI:
        description: Deploy Sample UI?
        required: true
        default: true
        type: boolean
      deployAIHub:
        description: Deploy AI Hub?
        type: boolean
        default: true
      runSecurityScan:
        description: Run Security Scan?
        required: false
        default: false
        type: boolean

      # GH Actions restrict you to only 10 inputs... so will have to refactor this to use it!
      # runBuildDeployBatch:
      #   description: Build and Deploy Batch?
      #   required: true
      #   default: false
      #   type: boolean

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

# ------------------------------------------------------------------------------------------------------------------------
env:
  # these are defined by the project itself, so they can stay here...
  ACR_REPO_NAME: 'aiflows'

  API_APP_PATH: 'app/Assistant.Hub.Api'
  API_ACR_APP_NAME: 'assistantapi'
  API_PORT: '8080'

  BATCH_APP_PATH: 'app/Assistant.Hub.Api.Batch'
  BATCH_ACR_APP_NAME: 'assistantbatch'
  BATCH_PORT: '8080'
  # activation is getting an error: The TargetPort 80 does not match the listening port 39581. The TargetPort 80 does not match any of the listening ports: [39581 4001 4001].

# ------------------------------------------------------------------------------------------------------------------------
jobs:
  template-env:
    # You can't pass environment variables to templates, so put them in outputs here that you CAN pass
    name: Template Env Variables
    runs-on: ubuntu-latest
    environment: ${{ inputs.deployEnvironment }}
    outputs:
      PROJECT_ROOT: ${{ github.workspace }}
      ENV_CODE: ${{ inputs.deployEnvironment }}
      APP_NAME: ${{ vars.APP_NAME }}
      APP_NAME_NO_DASHES: ${{ steps.set-env.outputs.APP_NAME_NO_DASHES }}
      RESOURCE_GROUP_NAME: '${{ vars.RESOURCEGROUP_PREFIX }}-${{ inputs.deployEnvironment }}'

      ACR_NAME: '${{ steps.set-env.outputs.APP_NAME_NO_DASHES }}cr${{ inputs.deployEnvironment }}'
      ACR_REPO_NAME: ${{ env.ACR_REPO_NAME }}
      CONTAINER_APP_ENV_NAME: '${{ steps.set-env.outputs.APP_NAME_NO_DASHES }}-cae-${{ inputs.deployEnvironment }}'

      API_CONTAINER_APP_NAME: '${{ steps.set-env.outputs.APP_NAME_NO_DASHES }}-ca-api-${{ inputs.deployEnvironment }}'
      API_APP_PATH: ${{ env.API_APP_PATH }}
      API_ACR_APP_NAME: ${{ env.API_ACR_APP_NAME }}
      API_PORT: ${{ env.API_PORT }}

      BATCH_CONTAINER_APP_NAME: '${{ steps.set-env.outputs.APP_NAME_NO_DASHES }}-ca-batch-${{ inputs.deployEnvironment }}'
      BATCH_APP_PATH: ${{ env.BATCH_APP_PATH }}
      BATCH_ACR_APP_NAME: ${{ env.BATCH_ACR_APP_NAME }}
      BATCH_PORT: ${{ env.BATCH_PORT }}
      
    steps:
      - name: Set common environment variables
        id: set-env
        run: |
          echo "PROJECT_ROOT: ${{ github.workspace }}"
          echo "inputs.ENV_CODE: ${{ inputs.deployEnvironment }}"
          echo "vars.APP_NAME: ${{ vars.APP_NAME }}"
    
          APP_NAME_NO_DASHES="$(echo ${{ vars.APP_NAME }} | tr -d '-' | tr -d '_')"
          echo "APP_NAME_NO_DASHES=$APP_NAME_NO_DASHES"
          echo "APP_NAME_NO_DASHES=$APP_NAME_NO_DASHES" >> $GITHUB_OUTPUT

          echo "AZURE_RESOURCE_GROUP: ${{ vars.RESOURCEGROUP_PREFIX }}-${{ inputs.deployEnvironment }}"

          echo "ACR_REPO_NAME: ${{ env.ACR_REPO_NAME }}"

          echo "API_APP_PATH: ${{ env.API_APP_PATH }}"
          echo "API_ACR_APP_NAME: ${{ env.API_ACR_APP_NAME }}"
          echo "API_PORT: ${{ env.API_PORT }}"

          echo "BATCH_APP_PATH: ${{ env.BATCH_APP_PATH }}"
          echo "BATCH_ACR_APP_NAME: ${{ env.BATCH_ACR_APP_NAME }}"
          echo "BATCH_PORT: ${{ env.BATCH_PORT }}"

  # ------------------------------------------------------------------------------------------------------------------------
  scan-code:
    name: Scan Code
    uses: ./.github/workflows/template-scan-code.yml
    if: inputs.runSecurityScan
    secrets: inherit
    permissions:
      actions: read
      contents: write
      checks: write
      security-events: write

  # ------------------------------------------------------------------------------------------------------------------------
  deploy-bicep:
    name: Deploy ${{ inputs.deployEnvironment }} Bicep
    uses: ./.github/workflows/template-create-infra.yml
    secrets: inherit
    needs:
      - template-env
    permissions:
      id-token: write
      contents: read
      actions: read
      pages: write
    with:
      envCode: ${{ inputs.deployEnvironment }}
      templatePath: './infra/bicep/'
      templateFile: 'main.bicep'
      parameterFile: ${{ inputs.parameterFile }}
      parameterFileReplaceTokens: 'true'
      createResourceGroup: ${{ inputs.createResourceGroup }}
      publicAccessEnabled: ${{ inputs.publicAccessEnabled }}
      createDnsZones: ${{ inputs.createDnsZones }}
      deployAIHub: ${{ inputs.deployAIHub }}
      deployBatchApp: false # use parm inputs.runBuildDeployBatch
      deployUIApp: ${{ inputs.runDeployUI }}
      addRoleAssignments: ${{ inputs.addRoleAssignments }}

  # ------------------------------------------------------------------------------------------------------------------------
  build-all:
    name: Build All Apps
    uses: ./.github/workflows/template-aca-build-all.yml
    needs:
      - template-env
      - deploy-bicep
    secrets: inherit
    with:
      ENV_CODE: ${{ inputs.deployEnvironment }}
      ACR_NAME: ${{ needs.template-env.outputs.ACR_NAME }}
      RESOURCE_GROUP: ${{ needs.template-env.outputs.RESOURCE_GROUP_NAME }}
      ACR_REPO_NAME: ${{ needs.template-env.outputs.ACR_REPO_NAME }}

      BUILD_DEPLOY_API: ${{ inputs.runBuildDeployAPI }}
      API_APP_PATH: ${{ needs.template-env.outputs.API_APP_PATH }}
      API_ACR_APP_NAME: ${{ needs.template-env.outputs.API_ACR_APP_NAME }}

      BUILD_DEPLOY_BATCH: false # use parm inputs.runBuildDeployBatch
      BATCH_APP_PATH: ${{ needs.template-env.outputs.BATCH_APP_PATH }}
      BATCH_ACR_APP_NAME: ${{ needs.template-env.outputs.BATCH_ACR_APP_NAME }}

  # ------------------------------------------------------------------------------------------------------------------------
  deploy-api:
    name: Deploy API ${{ inputs.deployEnvironment }} ${{ inputs.deployType }}
    uses: ./.github/workflows/template-aca-deploy.yml
    if: inputs.runBuildDeployAPI
    needs:
      - build-all
      - template-env
    secrets: inherit
    with:
      ENV_CODE: ${{ needs.template-env.outputs.ENV_CODE }}
      RESOURCE_GROUP: ${{ needs.template-env.outputs.RESOURCE_GROUP_NAME }}
      CONTAINER_APP_ENV_NAME: ${{ needs.build-all.outputs.API_APP_PATH }}
      CONTAINER_NAME: ${{ needs.template-env.outputs.API_CONTAINER_APP_NAME }}
      ACR_NAME: ${{ needs.template-env.outputs.ACR_NAME }}
      IMAGE_NAME: ${{ needs.build-all.outputs.API_IMAGE_NAME }}
      PORT: ${{ needs.template-env.outputs.API_PORT }}

  # ------------------------------------------------------------------------------------------------------------------------
  # deploy-batch:
  #   name: Deploy Batch ${{ inputs.deployEnvironment }} ${{ inputs.deployType }}
  #   uses: ./.github/workflows/template-aca-deploy.yml
  #   if: inputs.runBuildDeployBatch
  #   needs:
  #     - build-all
  #     - template-env
  #   secrets: inherit
  #   with:
  #     ENV_CODE: ${{ needs.template-env.outputs.ENV_CODE }}
  #     RESOURCE_GROUP: ${{ needs.template-env.outputs.RESOURCE_GROUP_NAME }}
  #     CONTAINER_APP_ENV_NAME: ${{ needs.build-all.outputs.BATCH_APP_PATH }}
  #     CONTAINER_NAME: ${{ needs.template-env.outputs.BATCH_CONTAINER_APP_NAME }}
  #     ACR_NAME: ${{ needs.template-env.outputs.ACR_NAME }}
  #     IMAGE_NAME: ${{ needs.build-all.outputs.BATCH_IMAGE_NAME }}
  #     PORT: ${{ needs.template-env.outputs.BATCH_PORT }}

  # ------------------------------------------------------------------------------------------------------------------------
  # Deploy a Project inside the AI Foundry Hub
  # ------------------------------------------------------------------------------------------------------------------------
  deploy-hub-project:
    name: Deploy Hub Project ${{ inputs.deployEnvironment }}
    uses: ./.github/workflows/template-ai-hub-project-deploy.yml
    if: inputs.deployAIHub
    needs:
      - deploy-bicep
      - template-env
    secrets: inherit
    permissions:
      id-token: write
      contents: read
      actions: read
      pages: write
    with:
      envCode: ${{ inputs.deployEnvironment }}
      resourceGroupName: ${{ needs.template-env.outputs.RESOURCE_GROUP_NAME }}
